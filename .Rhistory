# tissue$gene = gene_map$SYMBOL[match(tissue$gene,gene_map$UNIGENE)]
figure <- ggboxplot(tissue, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 0.6, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold", size = 25)) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 15),
strip.text.y = element_text(face = "bold", size = 15),
axis.title = element_text(size=15,face="bold"),
axis.text = element_text(size=15)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("") + xlab("")
return(figure)
}
grp_name = combn(c("Ms", "Ad", "Hi", "Sp", "S"), 2)
grp_num  = combn(1:5, 2)
bp_list <- c()
for (i in c(1:8,10)){
tissue_num  = grp_num[,i]
tissue_name = grp_name[,i]
gene_identify = which(agemap_result$MCTC_tbl$qval < 0.05 & agemap_result$pairs_MI_tbl_list[[i]]$qval < 0.05)
bp_list <-c(bp_list, list(tissue_gene_boxplot(tissue_num, gene_identify, tissue_name)))
}
bp1 = plot_grid(bp_list[[1]], NULL, nrow = 1, rel_widths = c(13, 0))
bp2 = plot_grid(bp_list[[2]], NULL, nrow = 1, rel_widths = c(3, 9))
bp3 = plot_grid(bp_list[[3]], NULL, nrow = 1, rel_widths = c(7, 6))
bp4 = plot_grid(bp_list[[4]], NULL, nrow = 1, rel_widths = c(8, 5))
bp5 = plot_grid(bp_list[[5]], NULL, nrow = 1, rel_widths = c(1, 8))
bp6 = plot_grid(bp_list[[6]], NULL, nrow = 1, rel_widths = c(4, 8))
bp7 = plot_grid(bp_list[[7]], NULL, nrow = 1, rel_widths = c(5, 7))
bp8 = plot_grid(bp_list[[8]], NULL, nrow = 1, rel_widths = c(7, 6))
bp10 = plot_grid(bp_list[[9]], NULL, nrow = 1, rel_widths = c(5, 7))
supfig1 = plot_grid(bp1, bp2, bp3, bp4, bp5, bp6, bp7, bp8, bp10,
ncol = 1, align = "v", axis = "tblr")
ggsave(supfig1, width = 20, height = 30, unit = "in", file = "supfig1_mcmi.svg")
## 02. MC-TC identified genes
tissue_gene_boxplot <- function(tissue_label, gene, tissue_name){
tissue1 = scale(agemap_data_list[[tissue_label[1]]][,gene]) %>% data.frame()  %>% mutate(time =  agemap_label_list[[tissue_label[1]]])
tissue2 = scale(agemap_data_list[[tissue_label[2]]][,gene]) %>% data.frame()  %>% mutate(time =  agemap_label_list[[tissue_label[2]]])
tissue1.long = tissue1 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., gene, expression, -c(ID, time), factor_key=TRUE) %>% mutate(tissue = tissue_name[1])
tissue2.long = tissue2 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., gene, expression, -c(ID, time), factor_key=TRUE) %>% mutate(tissue = tissue_name[2])
tissue = rbind(tissue1.long, tissue2.long)
# tissue$gene = gene_map$SYMBOL[match(tissue$gene,gene_map$UNIGENE)]
figure <- ggboxplot(tissue, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 0.6, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold", size = 25)) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 15),
strip.text.y = element_text(face = "bold", size = 15),
axis.title = element_text(size=15,face="bold"),
axis.text = element_text(size=15)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("") + xlab("")
return(figure)
}
grp_name = combn(c("Ms", "Ad", "Hi", "Sp", "S"), 2)
grp_num  = combn(1:5, 2)
bp_list <- c()
for (i in c(1:8,10)){
tissue_num  = grp_num[,i]
tissue_name = grp_name[,i]
gene_identify = which(agemap_result$MCTC_tbl$qval < 0.05 & agemap_result$pairs_MI_tbl_list[[i]]$qval < 0.05)
bp_list <-c(bp_list, list(tissue_gene_boxplot(tissue_num, gene_identify, tissue_name)))
}
bp1 = plot_grid(bp_list[[1]], NULL, nrow = 1, rel_widths = c(13, 0))
bp2 = plot_grid(bp_list[[2]], NULL, nrow = 1, rel_widths = c(3, 9))
bp3 = plot_grid(bp_list[[3]], NULL, nrow = 1, rel_widths = c(7, 6))
bp4 = plot_grid(bp_list[[4]], NULL, nrow = 1, rel_widths = c(8, 5))
bp5 = plot_grid(bp_list[[5]], NULL, nrow = 1, rel_widths = c(1, 8))
bp6 = plot_grid(bp_list[[6]], NULL, nrow = 1, rel_widths = c(4, 8))
bp7 = plot_grid(bp_list[[7]], NULL, nrow = 1, rel_widths = c(5, 7))
bp8 = plot_grid(bp_list[[8]], NULL, nrow = 1, rel_widths = c(7, 6))
bp10 = plot_grid(bp_list[[9]], NULL, nrow = 1, rel_widths = c(5, 7))
supfig1 = plot_grid(bp1, bp2, bp3, bp4, bp5, bp6, bp7, bp8, bp10,
ncol = 1, align = "v", axis = "tblr")
ggsave(supfig1, width = 20, height = 30, unit = "in", file = "supfig1_mcmi.svg")
library(MSCC)
library(MSCC)
study.data.list = agemap_data_list; study.label.list = agemap_label_list
w.est = NULL; n.perm = 1000; n.parallel = 50
if(!all(unlist(lapply(study.data.list, ncol)) == ncol(study.data.list[[1]]))){stop("The number of features should be equal between two studies.")}
if(is.null(w.est)){w.est <- unname(c(table(unlist(study.label.list)))/length(unlist(study.label.list)))}
feature.names <- colnames(study.data.list[[1]])
## Obtain the permuted labels
n.feature <- ncol(study.data.list[[1]])
n.study   <- length(study.data.list)
size.study <- sapply(1:n.study, function(s) length(study.label.list[[s]]))
perm.label <- list()
for(p in 1:n.perm){
perm <- lapply(1:n.study, function(s) sample(study.label.list[[s]]))
perm.label <- c(perm.label, list(perm))
}
### an overall analysis
## permutation stat
perm.res <- mclapply(1:n.perm, function(p) mc.stat(study.data.list, perm.label[[p]], w.est = w.est), mc.cores = n.parallel)
MCTC_perm <- t(sapply(1:n.perm, function(p) perm.res[[p]]$MCTC_stat))
minMCC_perm <- t(sapply(1:n.perm, function(p) perm.res[[p]]$minMCC_stat))
stat <- mc.stat(study.data.list, study.label.list, w.est = w.est)
library(parallel)
n.perm = 10
n.parallel = 1
if(!all(unlist(lapply(study.data.list, ncol)) == ncol(study.data.list[[1]]))){stop("The number of features should be equal between two studies.")}
if(is.null(w.est)){w.est <- unname(c(table(unlist(study.label.list)))/length(unlist(study.label.list)))}
feature.names <- colnames(study.data.list[[1]])
## Obtain the permuted labels
n.feature <- ncol(study.data.list[[1]])
n.study   <- length(study.data.list)
size.study <- sapply(1:n.study, function(s) length(study.label.list[[s]]))
perm.label <- list()
for(p in 1:n.perm){
perm <- lapply(1:n.study, function(s) sample(study.label.list[[s]]))
perm.label <- c(perm.label, list(perm))
}
### an overall analysis
## permutation stat
perm.res <- mclapply(1:n.perm, function(p) mc.stat(study.data.list, perm.label[[p]], w.est = w.est), mc.cores = n.parallel)
perm.res
load("~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Ongoing_Project/Methodology/202203_multi_class_correlation/20220719_package/MSCC/inst/script_paper/agemap/agemap_result_v2.RData")
agemap_mcc_test$MCTC_tbl
View(agemap_mcc_test$MCTC_tbl)
View(agemap_mcc_test$minMCC_tbl)
1.3 * 0.7
agemap_mcc_test$pairs_MI_tbl_list$`1:2`
load("~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Ongoing_Project/Methodology/202203_multi_class_correlation/20220719_package/MSCC/inst/script_paper/agemap/agemap_result_v2.RData")
### after server
library(ggpubr)
library(org.Mm.eg.db)
gene_map <- select(org.Mm.eg.db, keys=colnames(agemap_data_list[[1]]),
columns=c("GENENAME","SYMBOL"), keytype="UNIGENE")
View(agemap_mcc_test$MCTC_tbl)
View(agemap_mcc_test$minMCC_tbl)
View(agemap_mcc_test$pairs_MI_tbl_list$`1:2`)
sum(p.adjust(agemap_mcc_test$minMCC_tbl$pval, method = "fdr"))
sum(p.adjust(agemap_mcc_test$minMCC_tbl$pval, method = "fdr") < 0.05)
sum(p.adjust(agemap_mcc_test$minMCC_tbl$pval, method = "BH") < 0.05)
load("~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Ongoing_Project/Methodology/202203_multi_class_correlation/20220719_package/MSCC/inst/script_paper/agemap/agemap_result.RData")
sum(p.adjust(agemap_mcc_test$minMCC_tbl$pval, method = "BH") < 0.05)
sum(p.adjust(agemap_result$minMCC_tbl$pval, method = "BH") < 0.05)
sum(p.adjust(agemap_mcc_test$minMCC_tbl$pval, method = "BH") < 0.05)
sum(p.adjust(agemap_mcc_test$MTCT_tbl$pval, method = "BH") < 0.05)
sum(p.adjust(agemap_mcc_test$MCTC_tbl$pval, method = "BH") < 0.05)
sum(p.adjust(agemap_result$MCTC_tbl$pval, method = "BH") < 0.05)
load("~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Ongoing_Project/Methodology/202203_multi_class_correlation/20220719_package/MSCC/inst/script_paper/tmp.RData")
install.packages("BiocManager")
?install
library(BiocManager)
?install
BiocManager::install(c("limma", "samr", "DESeq2", "edgeR",
"preprocessCore", "EnhanceVolcano",
"impute", "ALL", "pasilla"))
p.adjust
load("C:/Users/zou19/OneDrive - University of Pittsburgh/Ongoing_Project/Methodology/202203_multi_class_correlation/20220719_package/MSCC/inst/script_paper/agemap/agemap_result_v3.RData")
View(agemap_mcc_test$MCTC_tbl)
View(agemap_mcc_test$minMCC_tbl)
library(MSCC)
load("C:/Users/zou19/OneDrive - University of Pittsburgh/Ongoing_Project/Methodology/202203_multi_class_correlation/20220719_package/MSCC/inst/script_paper/agemap/agemap_result_v4.RData")
View(agemap_mcc_test$MCTC_tbl)
View(agemap_mcc_test$minMCC_tbl)
library(parallel)
Simulation <- function(setting){
study.data.generator <- function(mu.matrix, sd.vector, grp.size){
study_data  <- rbind(
cbind(matrix(rnorm(grp.size[1]*300,  mu.matrix[1,1], sd.vector[1]), nrow = 300),  matrix(rnorm(grp.size[2]*300,  mu.matrix[1,2], sd.vector[1]), nrow = 300),  matrix(rnorm(grp.size[3]*300,  mu.matrix[1,3], sd.vector[1]), nrow = 300)), ## cateogry 1
cbind(matrix(rnorm(grp.size[1]*100,  mu.matrix[2,1], sd.vector[2]), nrow = 100),  matrix(rnorm(grp.size[2]*100,  mu.matrix[2,2], sd.vector[2]), nrow = 100),  matrix(rnorm(grp.size[3]*100,  mu.matrix[2,3], sd.vector[2]), nrow = 100)), ## cateogry 2
cbind(matrix(rnorm(grp.size[1]*100,  mu.matrix[3,1], sd.vector[3]), nrow = 100),  matrix(rnorm(grp.size[2]*100,  mu.matrix[3,2], sd.vector[3]), nrow = 100),  matrix(rnorm(grp.size[3]*100,  mu.matrix[3,3], sd.vector[3]), nrow = 100)), ## cateogry 3
cbind(matrix(rnorm(grp.size[1]*1500, mu.matrix[4,1], sd.vector[4]), nrow = 1500), matrix(rnorm(grp.size[2]*1500, mu.matrix[4,2], sd.vector[4]), nrow = 1500), matrix(rnorm(grp.size[3]*1500, mu.matrix[4,3], sd.vector[4]), nrow = 1500)) ## cateogry 4
)
study_label <- c(rep(1, grp.size[1]), rep(2, grp.size[2]), rep(3, grp.size[3]))
return(list(study_data = study_data,
study_label = study_label))
}
if(setting == "case1"){ ## Effect size = 0.5
study1.mu  <- matrix(c(1,3,5, 1,3,5, 1,3,5, 0,0,0), nrow = 4, byrow = T)
study1.sd  <- rep(3.5, 4)
study1.grp <- c(10, 5, 8)
study1 <- study.data.generator(mu.matrix = study1.mu, sd.vector = study1.sd, grp.size = study1.grp)
study2.mu  <- matrix(c(2,4,6, 6,4,2, 2,4,6, 0,0,0), nrow = 4, byrow = T)
study2.sd  <- rep(3.1, 4)
study2.grp <- c(5,8,10)
study2 <- study.data.generator(mu.matrix = study2.mu, sd.vector = study2.sd, grp.size = study2.grp)
study3.mu  <- matrix(c(1,4,7, 1,7,1, 0,0,0, 0,0,0), nrow = 4, byrow = T)
study3.sd  <- c(4.4, 5.9, 4.4, 4.4)
study3.grp <- c(8,10,5)
study3 <- study.data.generator(mu.matrix = study3.mu, sd.vector = study3.sd, grp.size = study3.grp)
}
if(setting == "case2"){ ## Effect size = 0.5
study1.mu  <- matrix(c(1,3,5, 1,3,5, 1,3,5, 0,0,0), nrow = 4, byrow = T)
study1.sd  <- rep(2.9, 4)
study1.grp <- c(10, 5, 8)
study1 <- study.data.generator(mu.matrix = study1.mu, sd.vector = study1.sd, grp.size = study1.grp)
study2.mu  <- matrix(c(2,4,6, 6,4,2, 2,4,6, 0,0,0), nrow = 4, byrow = T)
study2.sd  <- rep(2.6, 4)
study2.grp <- c(5,8,10)
study2 <- study.data.generator(mu.matrix = study2.mu, sd.vector = study2.sd, grp.size = study2.grp)
study3.mu  <- matrix(c(1,4,7, 1,7,1, 0,0,0, 0,0,0), nrow = 4, byrow = T)
study3.sd  <- c(3.7, 4.8, 3.7, 3.7)
study3.grp <- c(8,10,5)
study3 <- study.data.generator(mu.matrix = study3.mu, sd.vector = study3.sd, grp.size = study3.grp)
}
if(setting == "case3"){ ## Effect size = 0.5
study1.mu  <- matrix(c(1,3,5, 1,3,5, 1,3,5, 0,0,0), nrow = 4, byrow = T)
study1.sd  <- rep(2.5, 4)
study1.grp <- c(10, 5, 8)
study1 <- study.data.generator(mu.matrix = study1.mu, sd.vector = study1.sd, grp.size = study1.grp)
study2.mu  <- matrix(c(2,4,6, 6,4,2, 2,4,6, 0,0,0), nrow = 4, byrow = T)
study2.sd  <- rep(2.2, 4)
study2.grp <- c(5,8,10)
study2 <- study.data.generator(mu.matrix = study2.mu, sd.vector = study2.sd, grp.size = study2.grp)
study3.mu  <- matrix(c(1,4,7, 1,7,1, 0,0,0, 0,0,0), nrow = 4, byrow = T)
study3.sd  <- c(3.2, 4.3, 3.2, 3.2)
study3.grp <- c(8,10,5)
study3 <- study.data.generator(mu.matrix = study3.mu, sd.vector = study3.sd, grp.size = study3.grp)
}
return(list(study.data.list = c(list(t(study1$study_data)), list(t(study2$study_data)), list(t(study3$study_data))),
study.label.list = c(list(study1$study_label), list(study2$study_label), list(study3$study_label))))
}
library(MSCC)
set.seed(1)
sim.data = Simulation("case3")
perm.test.res <- mscc.permute.test(study.data.list = sim.data$study.data.list, study.label.list = sim.data$study.label.list,
w.est = NULL, n.perm = 1000, n.parallel = 50)
gene1 = scale(sapply(sim.data$study.data.list, function(x) x[,515])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene2 = scale(sapply(sim.data$study.data.list, function(x) x[,301])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene3 = scale(sapply(sim.data$study.data.list, function(x) x[,441])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene4 = scale(sapply(sim.data$study.data.list, function(x) x[,1369])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
colnames(gene1)[1:3] = colnames(gene2)[1:3] = colnames(gene3)[1:3] = colnames(gene4)[1:3] = c("Study 1", "Study 2", "Study 3", "Study 4")
gene1.long = gene1 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 1")
gene2.long = gene2 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 2")
gene3.long = gene3 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 3")
gene4.long = gene4 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 4")
gene.cmb = rbind(gene1.long, gene2.long, gene3.long, gene4.long)
fig1 = ggboxplot(gene.cmb, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 1.2, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold")) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 20),
strip.text.y = element_text(face = "bold", size = 20),
axis.title = element_text(size=20,face="bold"),
axis.text = element_text(size=18)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("Expression") + xlab("Class")
library(ggpubr)
fig1 = ggboxplot(gene.cmb, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 1.2, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold")) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 20),
strip.text.y = element_text(face = "bold", size = 20),
axis.title = element_text(size=20,face="bold"),
axis.text = element_text(size=18)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("Expression") + xlab("Class")
set.seed(1)
sim.data = Simulation("case3")
perm.test.res <- mscc.permute.test(study.data.list = sim.data$study.data.list, study.label.list = sim.data$study.label.list,
w.est = NULL, n.perm = 1000, n.parallel = 50)
gene1 = scale(sapply(sim.data$study.data.list, function(x) x[,515])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene2 = scale(sapply(sim.data$study.data.list, function(x) x[,301])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene3 = scale(sapply(sim.data$study.data.list, function(x) x[,441])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene4 = scale(sapply(sim.data$study.data.list, function(x) x[,1369])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
colnames(gene1)[1:3] = colnames(gene2)[1:3] = colnames(gene3)[1:3] = colnames(gene4)[1:3] = c("Study 1", "Study 2", "Study 3", "Study 4")
gene1.long = gene1 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 1")
gene2.long = gene2 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 2")
gene3.long = gene3 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 3")
gene4.long = gene4 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 4")
gene.cmb = rbind(gene1.long, gene2.long, gene3.long, gene4.long)
fig1 = ggboxplot(gene.cmb, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 1.2, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold")) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 20),
strip.text.y = element_text(face = "bold", size = 20),
axis.title = element_text(size=20,face="bold"),
axis.text = element_text(size=18)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("Expression") + xlab("Class")
load("C:/Users/zou19/OneDrive - University of Pittsburgh/Ongoing_Project/Methodology/202203_multi_class_correlation/20220719_package/MSCC/inst/script_paper/simulation/simulation_results/simulation_case3_example_v2.RData")
gene1 = scale(sapply(sim.data$study.data.list, function(x) x[,515])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene2 = scale(sapply(sim.data$study.data.list, function(x) x[,301])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene3 = scale(sapply(sim.data$study.data.list, function(x) x[,441])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene4 = scale(sapply(sim.data$study.data.list, function(x) x[,1369])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
colnames(gene1)[1:3] = colnames(gene2)[1:3] = colnames(gene3)[1:3] = colnames(gene4)[1:3] = c("Study 1", "Study 2", "Study 3", "Study 4")
gene1.long = gene1 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 1")
gene2.long = gene2 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 2")
gene3.long = gene3 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 3")
gene4.long = gene4 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 4")
gene.cmb = rbind(gene1.long, gene2.long, gene3.long, gene4.long)
fig1 = ggboxplot(gene.cmb, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 1.2, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold")) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 20),
strip.text.y = element_text(face = "bold", size = 20),
axis.title = element_text(size=20,face="bold"),
axis.text = element_text(size=18)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("Expression") + xlab("Class")
fig1
load("C:/Users/zou19/OneDrive - University of Pittsburgh/Ongoing_Project/Methodology/202203_multi_class_correlation/20220719_package/MSCC/inst/script_paper/simulation/simulation_results/simulation_case3_example.RData")
gene1 = scale(sapply(sim.data$study.data.list, function(x) x[,515])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene2 = scale(sapply(sim.data$study.data.list, function(x) x[,301])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene3 = scale(sapply(sim.data$study.data.list, function(x) x[,441])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene4 = scale(sapply(sim.data$study.data.list, function(x) x[,1369])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
colnames(gene1)[1:3] = colnames(gene2)[1:3] = colnames(gene3)[1:3] = colnames(gene4)[1:3] = c("Study 1", "Study 2", "Study 3", "Study 4")
gene1.long = gene1 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 1")
gene2.long = gene2 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 2")
gene3.long = gene3 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 3")
gene4.long = gene4 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 4")
gene.cmb = rbind(gene1.long, gene2.long, gene3.long, gene4.long)
fig1 = ggboxplot(gene.cmb, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 1.2, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold")) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 20),
strip.text.y = element_text(face = "bold", size = 20),
axis.title = element_text(size=20,face="bold"),
axis.text = element_text(size=18)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("Expression") + xlab("Class")
fig1
set.seed(1)
sim.data = Simulation("case")
perm.test.res <- mc.permute.test(study.data.list = sim.data$study.data.list, study.label.list = sim.data$study.label.list,
w.est = NULL, n.perm = 1000, n.parallel = 1)
gene1 = scale(sapply(sim.data$study.data.list, function(x) x[,1])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene2 = scale(sapply(sim.data$study.data.list, function(x) x[,2])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene3 = scale(sapply(sim.data$study.data.list, function(x) x[,3])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene4 = scale(sapply(sim.data$study.data.list, function(x) x[,4])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
colnames(gene1)[1:4] = colnames(gene2)[1:4] = colnames(gene3)[1:4] = colnames(gene4)[1:4] = c("Study 1", "Study 2", "Study 3", "Study 4")
gene1.long = gene1 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 1")
gene2.long = gene2 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 2")
gene3.long = gene3 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 3")
gene4.long = gene4 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 4")
gene.cmb = rbind(gene1.long, gene2.long, gene3.long, gene4.long)
ggboxplot(gene.cmb, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 1.2, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold")) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 20),
strip.text.y = element_text(face = "bold", size = 20),
axis.title = element_text(size=20,face="bold"),
axis.text = element_text(size=18)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("Expression") + xlab("Class")
Simulation <- function(setting){
study.data.generator <- function(mu.matrix, sd.vector, grp.size){
study_data  <- rbind(
c(rnorm(grp.size[1],  mu.matrix[1,1], sd.vector[1]),  rnorm(grp.size[2],  mu.matrix[1,2], sd.vector[1]),  rnorm(grp.size[3],  mu.matrix[1,3], sd.vector[1])), ## cateogry 1
c(rnorm(grp.size[1],  mu.matrix[2,1], sd.vector[2]),  rnorm(grp.size[2],  mu.matrix[2,2], sd.vector[2]),  rnorm(grp.size[3],  mu.matrix[2,3], sd.vector[2])), ## cateogry 2
c(rnorm(grp.size[1],  mu.matrix[3,1], sd.vector[3]),  rnorm(grp.size[2],  mu.matrix[3,2], sd.vector[3]),  rnorm(grp.size[3],  mu.matrix[3,3], sd.vector[3])), ## cateogry 3
c(rnorm(grp.size[1],  mu.matrix[4,1], sd.vector[4]),  rnorm(grp.size[2],  mu.matrix[4,2], sd.vector[4]),  rnorm(grp.size[3],  mu.matrix[4,3], sd.vector[4])) ## cateogry 4
)
study_label <- c(rep(1, grp.size[1]), rep(2, grp.size[2]), rep(3, grp.size[3]))
return(list(study_data = study_data,
study_label = study_label))
}
if(setting == "case"){ ## Effect size = 0.5
study1.mu  <- matrix(c(1,3,5, 5,3,1, 1,3,5, 0,0,0), nrow = 4, byrow = T)
study1.sd  <- rep(1, 4)
study1.grp <- c(20, 20, 20)
study1 <- study.data.generator(mu.matrix = study1.mu, sd.vector = study1.sd, grp.size = study1.grp)
study2.mu  <- matrix(c(1,3,5, 5,3,1, 1,3,5, 0,0,0), nrow = 4, byrow = T)
study2.sd  <- rep(1, 4)
study2.grp <- c(20, 20, 20)
study2 <- study.data.generator(mu.matrix = study2.mu, sd.vector = study2.sd, grp.size = study2.grp)
study3.mu  <- matrix(c(1,3,5, 5,3,1, 1,7,1, 0,0,0), nrow = 4, byrow = T)
study3.sd  <- rep(1, 4)
study3.grp <- c(20, 20, 20)
study3 <- study.data.generator(mu.matrix = study3.mu, sd.vector = study3.sd, grp.size = study3.grp)
study4.mu  <- matrix(c(1,3,5, 1,7,1, 1,7,1, 0,0,0), nrow = 4, byrow = T)
study4.sd  <- rep(1, 4)
study4.grp <- c(20, 20, 20)
study4 <- study.data.generator(mu.matrix = study4.mu, sd.vector = study4.sd, grp.size = study4.grp)
}
return(list(study.data.list = c(list(t(study1$study_data)), list(t(study2$study_data)), list(t(study3$study_data)), list(t(study4$study_data))),
study.label.list = c(list(study1$study_label), list(study2$study_label), list(study3$study_label), list(study4$study_label))))
}
set.seed(1)
sim.data = Simulation("case")
perm.test.res <- mc.permute.test(study.data.list = sim.data$study.data.list, study.label.list = sim.data$study.label.list,
w.est = NULL, n.perm = 1000, n.parallel = 1)
gene1 = scale(sapply(sim.data$study.data.list, function(x) x[,1])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene2 = scale(sapply(sim.data$study.data.list, function(x) x[,2])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene3 = scale(sapply(sim.data$study.data.list, function(x) x[,3])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
gene4 = scale(sapply(sim.data$study.data.list, function(x) x[,4])) %>% data.frame()  %>% mutate(time = sim.data$study.label.list[[1]])
colnames(gene1)[1:4] = colnames(gene2)[1:4] = colnames(gene3)[1:4] = colnames(gene4)[1:4] = c("Study 1", "Study 2", "Study 3", "Study 4")
gene1.long = gene1 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 1")
gene2.long = gene2 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 2")
gene3.long = gene3 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 3")
gene4.long = gene4 %>% tibble::rownames_to_column("ID") %>% tidyr::gather(., tissue, expression, -c(ID, time), factor_key=TRUE) %>% mutate(gene = "Gene 4")
gene.cmb = rbind(gene1.long, gene2.long, gene3.long, gene4.long)
ggboxplot(gene.cmb, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 1.2, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold")) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 20),
strip.text.y = element_text(face = "bold", size = 20),
axis.title = element_text(size=20,face="bold"),
axis.text = element_text(size=18)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("Expression") + xlab("Class")
ggboxplot(gene.cmb, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 1.2, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold")) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 20),
strip.text.y = element_text(face = "bold", size = 20),
axis.title = element_text(size=20,face="bold"),
axis.text = element_text(size=18)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("Expression") + xlab("Class") +
scale_color_manual(values = c("#f5cd79", "#546de5", "#e15f41", "#c44569"))
ggboxplot(gene.cmb, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 1.2, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold")) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 20),
strip.text.y = element_text(face = "bold", size = 20),
axis.title = element_text(size=20,face="bold"),
axis.text = element_text(size=18)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("Expression") + xlab("Class") +
scale_color_manual(values = c("#f5cd79", "#546de5", "#e15f41", "#3dc1d3"))
ggboxplot(gene.cmb, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 1.2, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold")) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 20),
strip.text.y = element_text(face = "bold", size = 20),
axis.title = element_text(size=20,face="bold"),
axis.text = element_text(size=18)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("Expression") + xlab("Class") +
scale_color_manual(values = c("#f19066", "#546de5", "#e15f41", "#3dc1d3"))
fig1 = ggboxplot(gene.cmb, x = "time", y = "expression",
add = "jitter", add.params = list(alpha = 1.2, size = 1),
facet.by = c("tissue", "gene"), color = "gene",
font.label = list(face = "bold")) +
theme_bw() +
theme(legend.position="none", strip.text.x = element_text(face = "bold", size = 20),
strip.text.y = element_text(face = "bold", size = 20),
axis.title = element_text(size=20,face="bold"),
axis.text = element_text(size=18)) +
ylim(c(-2,2)) +
stat_summary(fun = median, geom = "line", aes(group=1, color=gene), size = 1) +
ylab("Expression") + xlab("Class") +
scale_color_manual(values = c("#f19066", "#546de5", "#e15f41", "#3dc1d3"))
?mica.full
?mica.full
load("C:/Users/jianz/SynologyDrive/Ongoing_Project/Methodology/Software/MICA/data/mouse_metabolism.RData")
metabolism_label[[1]]
data("mouse_metabolism")
force(metabolism_data)
force(metabolism_label)
data("mouse_metabolism")
data("metabolism_data")
data(metabolism_data)
library(MICA)
?metabolism_data
metabolism_data
metabolism_result <- mica.full(metabolism_data, metabolism_label)
metabolism_result <- mica.full(metabolism_data, metabolism_label)
metabolism_result <- mica.full(metabolism_data, metabolism_label)
devtools::install_github('jianzou75/MICA')
load("C:/Users/jianz/SynologyDrive/Ongoing_Project/Methodology/202203_multi_class_correlation/20230625_v3B/data/data_source/estrogen_preprocessed.RData")
View(estrogene_data)
estrogene_data <- lapply(estrogene_data, function(d) t(d))
estrogene_data[[1]]
estrogene_data <- lapply(estrogene_data, function(d) t(d))
estrogene_data[[1]]
save(estrogene_data, estrogene_label, file = "estrogene.RData")
estrogene_label
load("C:/Users/jianz/SynologyDrive/Ongoing_Project/Methodology/202305_tumor_malignancy_prediction/20240120_v1C/data/result/01_tnbc_mica_result.RData")
load("C:/Users/jianz/SynologyDrive/Ongoing_Project/Methodology/202305_tumor_malignancy_prediction/20240120_v1C/data/database/processed/01_tnbc_seurat_mica.RData")
tnbc_data
tnbc_label
load("01_tnbc_seurat_mica.RData")
load("C:/Users/jianz/SynologyDrive/Ongoing_Project/Methodology/202305_tumor_malignancy_prediction/20240120_v1C/data/database/processed/01_tnbc_seurat_mica.RData")
tnbc_data[[1]]
head(tnbc_data[[1]])
View(tnbc_data[[1]])
save(tnbc_data, tnbc_label, file = "tnbc_progression.RData")
load("C:/Users/jianz/SynologyDrive/Ongoing_Project/Methodology/Software/MICA/data/estrogene.RData")
estrogene_data[[1]]
estrogene_data <- lapply(estrogene_data, function(x) t(x))
save(estrogene_data, estrogene_label, file = "estrogene.RData")
load("C:/Users/jianz/SynologyDrive/Ongoing_Project/Methodology/Software/MICA/data/mouse_metabolism.RData")
metabolism_data[[1]]
load("C:/Users/jianz/SynologyDrive/Ongoing_Project/Methodology/Software/MICA/data/tnbc_progression.RData")
